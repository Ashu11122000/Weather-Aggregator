spring.application.name=weather-data-aggregator

# Server Configuration
server.port=8080


# Connects to MongoDB running locally.
spring.data.mongodb.uri=mongodb://localhost:27017/weather_db

# The database where weather data will be stored.
spring.data.mongodb.database=weather_db


# Kafka broker address
spring.kafka.bootstrap-servers=localhost:9092

# Consumer group configuration
spring.kafka.consumer.group-id=weather-group

# When a Kafka consumer starts, it needs to know where to start reading messages from a topic.
spring.kafka.consumer.auto-offset-reset=earliest

# Enable Auto-Commit for Kafka Messages
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-commit-interval=1000

# Kafka messages consist of a key and a value. The deserializer is responsible for converting the incoming binary data (bytes) into a readable format (e.g., String, JSON, Integer, etc.).
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Producer properties
# When a Kafka producer sends messages, it must convert the message key into a format that Kafka understands. A serializer does this conversion.
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

listeners=PLAINTEXT://localhost:9092

management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.metrics.export.prometheus.enabled=true









